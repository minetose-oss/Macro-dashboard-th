name: Update macro data (server-side)

on:
  schedule:
    - cron: "0 * * * *"   # รันทุกชั่วโมง (UTC)
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Generate data.json
        run: |
          echo "Node version:" && node -v
          cat > build_data.mjs <<'EOF'
          import { writeFile } from 'fs/promises';

          async function fetchText(url){
            const r = await fetch(url);
            if(!r.ok) throw new Error(`Fetch ${url} ${r.status}`);
            return await r.text();
          }
          function parseCSV(text){
            const lines = text.trim().split(/\r?\n/);
            const header = lines.shift().split(',');
            const rows = lines.map(l => l.split(','));
            return { header, rows };
          }
          function computeWoW(dates, vals){
            let i = vals.length-1;
            while(i>=0 && (vals[i]==null || isNaN(vals[i]))) i--;
            if(i<0) return {last:null, delta:null};
            const last = +vals[i];
            const lastDate = new Date(dates[i]);
            const target = new Date(lastDate.getTime() - 7*24*3600*1000);
            let j=i-1;
            for(; j>=0; j--){
              const dj = new Date(dates[j]);
              if(dj <= target && vals[j]!=null && !isNaN(vals[j])) break;
            }
            return { last, delta: j>=0 ? last - (+vals[j]) : null };
          }
          async function fredSeries(id){
            const txt = await fetchText(`https://fred.stlouisfed.org/graph/fredgraph.csv?id=${id}`);
            const {header, rows} = parseCSV(txt);
            const di = header.indexOf('DATE');
            const vi = header.indexOf(id);
            const x = [], y = [];
            for(const r of rows){ x.push(r[di]); y.push(r[vi]==='.' ? null : +r[vi]); }
            const wow = computeWoW(x,y);
            return { id, x, y, last: wow.last, delta: wow.delta };
          }
          async function nfci(){
            const txt = await fetchText("https://www.chicagofed.org/~/media/publications/nfci/files/nfci.csv");
            const {header, rows} = parseCSV(txt);
            const di = header.findIndex(h=>h.toLowerCase().includes('date'));
            const ni = header.findIndex(h=>h.toUpperCase()==='NFCI');
            const ai = header.findIndex(h=>h.toUpperCase()==='ANFCI');
            const x=[], yN=[], yA=[];
            for(const r of rows){
              if(!r[di]) continue;
              x.push(r[di]);
              yN.push(r[ni] ? +r[ni] : null);
              yA.push(r[ai] ? +r[ai] : null);
            }
            return { x, yN, yA };
          }
          async function dxy(){
            try{
              const j = await (await fetch("https://query1.finance.yahoo.com/v7/finance/quote?symbols=DX-Y.NYB,DX=F")).json();
              const arr = j?.quoteResponse?.result || [];
              for(const q of arr){ if(typeof q.regularMarketPrice === 'number') return {last:q.regularMarketPrice, source:'yahoo'}; }
            }catch(e){}
            const s = await fredSeries('DTWEXBGS');  // Fallback: USD Broad
            return { last: s.last, delta: s.delta, source: 'DTWEXBGS' };
          }

          (async ()=>{
            const vix  = await fredSeries('VIXCLS');
            const real = await fredSeries('DFII10');
            const hy   = await fredSeries('BAMLH0A0HYM2');
            const bbb  = await fredSeries('BAMLC0A4CBBB');
            const fc   = await nfci();
            const usd  = await dxy();

            const data = {
              updated: new Date().toISOString(),
              series: { vix, real, hy, bbb, nfci: fc, dxy: usd }
            };
            await writeFile('data.json', JSON.stringify(data));
            console.log('Wrote data.json');
          })().catch(e=>{ console.error(e); process.exit(1); });
          EOF

          node build_data.mjs

      - name: Commit data.json
        run: |
          if [ -n "$(git status --porcelain data.json)" ]; then
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add data.json
            git commit -m "Update data.json"
            git push
          else
            echo "No changes"
          fi
